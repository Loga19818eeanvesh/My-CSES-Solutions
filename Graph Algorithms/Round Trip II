
 
#include <iostream>
#include<vector>
using namespace std;
class graph{
private:
    vector<int> v;
    vector<vector<int>> e;
    vector<int> r;
public:
    void addvertex(int i){
        v.push_back(i);
    }
    void initialise(){
        e.resize(v.size());
    }
    void addedges(int a,int b){
        e[a-1].push_back(b-1);
    }
    void visit(int* p,int a,int b){
        if(a==b){return;}
        visit(p, a, p[b]);
        r.push_back(p[b]);
    }
    void dfs_visit(int i,char* c,int* p){
        for(int j=0;j<e[i].size();j++){
            if(c[e[i][j]]=='w'){
                c[e[i][j]]='g';
                p[e[i][j]]=i;
                dfs_visit(e[i][j], c, p);
            }
            else if(c[e[i][j]]=='g'){
                visit(p,e[i][j],i);
                r.push_back(i);
                cout<<r.size()+1<<endl;
                for(int l=0;l<r.size();l++){
                    cout<<r[l]+1<<" ";
                }
                cout<<r[0]+1<<endl;
                exit(0);
            }
        }
        c[i]='b';
    }
    void dfs(){
        char c[v.size()];
        int p[v.size()];
        for(int i=0;i<v.size();i++){
            c[i]='w';
            p[i]=-1;
        }
        for(int i=0;i<v.size();i++){
            if(c[i]=='w'){
                c[i]='g';
                dfs_visit(i,c,p);
            }
        }
        cout<<"IMPOSSIBLE"<<endl;
    }
};
int main() {
    int n;
    int m;
    cin>>n;
    cin>>m;
    graph g;
    for(int i=1;i<=n;i++){
        g.addvertex(i);
    }
    g.initialise();
    int a;
    int b;
    for(int i=0;i<m;i++){
        cin>>a;
        cin>>b;
        g.addedges(a, b);
    }
    g.dfs();
    return 0;
}
