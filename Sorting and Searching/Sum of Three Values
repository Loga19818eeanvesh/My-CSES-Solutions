//
//  main.cpp
//  Sum of Three Values
//
//  Created by Logas81855anvesh on 06/04/21.
//
 
#include <iostream>
 
using namespace std;
 
struct node{
    int a;
    int i;
};
 
int Binary_Search(node* p,int a,int b,int k){
    if(a<=b){
        int c=(a+b)/2;
        if(p[c].a==k){return (c);}
        else if(k<p[c].a){return (Binary_Search(p, a, c-1, k));}
        else if(k>p[c].a){return (Binary_Search(p, c+1, b, k));}
    }
    return (-1);
}
 
void merge(node* p,int a,int c,int b){
    int l1=c-a+1;
    int r1=b-c;
    node l[l1+1];
    node r[r1+1];
    l[l1].a=1e9+1;
    r[r1].a=1e9+1;
    for(int i=0;i<l1;i++){
        l[i]=p[a+i];
    }
    for(int i=0;i<r1;i++){
        r[i]=p[c+1+i];
    }
    int li=0;
    int ri=0;
    for(int i=a;i<=b;i++){
        if(l[li].a<=r[ri].a){
            p[i]=l[li];
            li++;
        }
        else{
            p[i]=r[ri];
            ri++;
        }
    }
}
 
void merge_sort(node* p,int a,int b){
    if(a<b){
        int c=(a+b)/2;
        merge_sort(p, a, c);
        merge_sort(p, c+1, b);
        merge(p,a,c,b);
    }
}
 
int main() {
    int n;
    int x;
    cin>>n;
    cin>>x;
    node p[n];
    for(int i=0;i<n;i++){
        cin>>p[i].a;
        p[i].i=i;
    }
    merge_sort(p,0,n-1);
    int flag=0;
    for(int i=0;i<n;i++){
        int x1=x-p[i].a;
        for(int j=i+1;j<n;j++){
            int k=Binary_Search(p, i+1, n-1, x1-p[j].a);
            if(k!=-1){
                if(k==j){
                    if(k-1>i && p[k-1].a==p[k].a){
                        cout<<p[i].i+1<<" "<<p[j].i+1<<" "<<p[k-1].i+1<<"\n";
                        flag=1;
                    }
                    else if(k+1<n && p[k+1].a==p[k].a){
                        cout<<p[i].i+1<<" "<<p[j].i+1<<" "<<p[k+1].i+1<<"\n";
                        flag=1;
                    }
                }
                else{
                    cout<<p[i].i+1<<" "<<p[j].i+1<<" "<<p[k].i+1<<"\n";
                    flag=1;
                }
            }
            if(flag==1){break;}
        }
        if(flag==1){break;}
    }
    if(flag==0){cout<<"IMPOSSIBLE \n";}
    return 0;
}
